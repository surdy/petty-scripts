#!/usr/bin/env bash

set -o errexit
set -o nounset
set -x 

GREEN="\033[0;32m"
YELLOW="\033[0;33m"
END="\033[0m"

get_input()
{
    question=${1}
    default=${2}
    echo -en "${YELLOW}$question${END} [default ${GREEN}${default}${END}]: "
    read answer
    answer=${answer:-$default}
}

grant_user_permission()
{
    user=${1}
    perm_string=${2}
    perm_action=${3}
    description=${4}

    echo "${description}"

    curl -k -L -X PUT \
         -H "Authorization: token=${auth_token}" \
         -H 'Content-Type: application/json' \
         "${dcos_url}/acs/api/v1/acls/${perm_string}" \
         -d '{"description":"${description}"}'

    curl -k -L -X PUT \
         -H "Authorization: token=${auth_token}" \
         "${dcos_url}/acs/api/v1/acls/${perm_string}/users/${user}/${perm_action}"
}

if [[ $# -eq 0 ]]; then
    echo "USAGE: provision_service_account <package_name> [strict]"
    exit 1
else
    package_name="${1}"
fi

security=''
if [[ "x${2}" == "xstrict" ]]; then
    security="--strict"
fi
    

get_input "Enter service name" "${package_name}"
service_name="${answer}"

get_input "Enter service account name" "${service_name}-principal"
service_account="${answer}"

get_input "Enter service resource role" "${service_name}-role"
service_role="${answer}"

get_input "Enter service path" "${service_name}/${service_name}-secret"
secret_path="${answer}"

dcos auth login

echo "Installing enterprise(security) CLI subcommand"
if ! dcos package install --yes dcos-enterprise-cli; then
    echo "Failed to install dcos-enterprise cli subcommand" >&2
    exit 1
fi

echo "Creating keypair"
if ! dcos security org service-accounts keypair private-key.pem public-key.pem; then
    echo "Failed to create keypair for ${service_name} service account" >&2
    exit 1
fi

echo "Creating service account"
#dcos security org service-accounts delete "${service_account}" &> /dev/null
if ! dcos security org service-accounts create -p public-key.pem -d "My service account" "${service_account}"; then
    echo "Failed to create service account '${service_account}'" >&2
    exit 1
fi

echo "Creating secret"
#dcos security secrets delete "${secret_path}" &> /dev/null
if ! dcos security secrets create-sa-secret ${security} private-key.pem "${service_account}" "${secret_path}"; then
    echo "Failed to create secret '${secret_path}' for service account '${service_account}'" >&2
    exit 1
fi

echo Service account created for account=${service_account} secret=${secret_path}

auth_token=$(dcos config show core.dcos_acs_token)
dcos_url=$(dcos config show core.dcos_url)

if [[ "${security}" == "--strict" ]]; then
    grant_user_permission ${service_account} \
        "dcos:mesos:master:task:user:nobody" \
        create \
        "Allow ${service_account} to execute Mesos tasks as user=nobody"
fi

grant_user_permission ${service_account} \
    "dcos:mesos:master:framework:role:${service_role}" \
    create \
    "Allow ${service_account} to register as a Mesos framework with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:reservation:role:${service_role}" \
    create \
    "Allow ${service_account} to create resource reservations on Mesos with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:volume:role:${service_role}" \
    create \
    "Allow ${service_account} to create volumes on Mesos with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:reservation:principal:${service_account}" \
    delete \
    "Allow ${service_account} to delete resource reservations on Mesos with principal=${service_account}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:volume:principal:${service_account}" \
    delete \
    "Allow ${service_account} to delete volumes on Mesos with principal=${service_account}"


tee "${service_name}-options.json" <<EOF
{
  "service": {
    "service_account": "${service_account}",
    "service_account_secret": "${secret_path}"
  }
}
EOF
